// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Invoice {
  id              String  @id @default(cuid())
  status          String
  companyName     String
  companyEmail    String
  companyAddress  String
  customerName    String
  customerEmail   String
  customerAddress String?
  invoiceNumber   String
  invoiceDate     String
  accountName     String
  accountNumber   String
  sortCode        String
  paymentTerms    String

  items  InvoiceItem[]
  userId String
  user   User          @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id     String @id @default(cuid())
  title  String
  amount Int

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDefaultInvoiceValues {
  id             String @id @default(cuid())
  companyName    String
  companyEmail   String
  companyAddress String
  accountName    String
  accountNumber  String
  sortCode       String
  paymentTerms   String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts             Account[]
  sessions             Session[]
  invoices             Invoice[]
  defaultInvoiceValues UserDefaultInvoiceValues[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
